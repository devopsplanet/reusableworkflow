# CI/CD Workflow for Building Java Microservices and creating Docker Image of them.

name: BuildCode

# Controls when the workflow will run
on:
  # Triggers the workflow on call from the source repo.
  workflow_call:
    inputs:
      serviceName:
        required: true
        type: string
      pomPath:
        required: true
        type: string
      user:
        required: true
        type: string
      registry:
        required: true
        type: string
      event_name:
        required: true
        type: string
      env:
        required: true
        type: string
    outputs:
      imageName:
        description: "Image name with Tag"
        value: ${{ jobs.build.outputs.imageName }}
    secrets:
      PATTOKEN:
        required: true


env:
  REGISTRY: ${{ inputs.registry }}
  REPO_NAME: ${{ inputs.serviceName }}
  user: ${{ inputs.user }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    outputs:
      imageName: ${{ steps.build-image.outputs.imageName }}

    permissions:
      contents: 'read'
      packages: 'write'

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3

    - name: Build with Maven
      run: mvn clean install -f ${{ inputs.pomPath }}

    - name: Log in to the Container registry
      if:  ${{ inputs.event_name != 'pull_request' }}
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ env.user}}
        password: ${{ secrets.PATTOKEN }}

    - name: Build, tag, and push image to Github Package
      if:  ${{ inputs.event_name != 'pull_request' }}
      id: build-image
      env:
        IMAGE_TAG: ${{ inputs.env }}-${{ github.sha }}
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.REPO_NAME }}:$IMAGE_TAG .
        docker push ${{ env.REGISTRY }}/${{ env.REPO_NAME }}:$IMAGE_TAG
        echo "::set-output name=imageName::${{ env.REGISTRY }}/${{ env.REPO_NAME }}:$IMAGE_TAG"
